HOW I'LL USE THIS DOCUMENT:
Moving forward, I will rely more heavily on the git log to do things like 
pasting in the stackOverflow URLs of articles that explain my decisions.

CASE-INSENSITIVE SEARCH:

## I learned about using '(?i)' or other (?iLmsux) terms from here:
##http://stackoverflow.com/questions/500864/case-insensitive-python-regular-expression-without-re-compile
##(See answer from aem999.)
##Aem999 uses and r before the expression, which treats the string a a raw
##string and would ignore the symbolism of things like \n, as explained here:
##http://stackoverflow.com/questions/4780088/in-python-what-does-preceding-a-string-literal-with-r-mean
##Note: <bob_f> from the python irc recommended an altnerative strategy:
##MrFichter: Yes, create your regex using \
##re.compile and pass flags=re.IGNORECASE
## See @Roger Pate's comments about re.compile here: http://stackoverflow.com/questions/452104/is-it-worth-using-pythons-re-compile


RE.FINDALL()

##The line above is inspired by a line @Fichtitious
##mentioned in a tutorial email he sent me:
##re.findall('Published on.*', content)
##@Fichtitious explained the following:
##''.' is the wildcard character, and '*' means 0 or
##more occurrences of the preceding character.  So
##'.*' means go match 0 or more of anything, and
##'Published on.*' means go match 'Published on'
##followed by 0 or more of anything.
##By default, all re matches go only as far as
##the end of the line, so this time we matched each
##occurrence of 'Published on' and all the
##characters coming after it until the next newline.'
##I wasn't sure if I'd be able to concatenate
##'.*' with my variable 'term,' but it looks like
##this worked!


OUTTAKE: JSON.LOAD

##@Fichtitious recommended the below for my
##PracticeWebscraper project, but I'm not sure if it
##will work with the current project.
##import json
##forecast = json.load (page)
